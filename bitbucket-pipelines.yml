image: node:14.16.0

definitions:
  services:
    docker:
      memory: 3072
  caches:
    docker-cache: docker-cache

  steps:
    - step: &set-environment
        name: Set Environment
        artifacts:
          - environment.sh

    - step: &set-aggregator
        conditions: &aggregator-condition
          changesets:
            includePaths:
            - "apps/aggregator/**"
            - "libs/**"
        name: Check Aggregator Changed
        script:
        - source environment.sh
        - echo "export UPDATED_APPS='$UPDATED_APPS aggregator'" >> environment.sh
        artifacts:
          - environment.sh

    - step: &set-api
        conditions: &api-condition
          changesets:
            includePaths:
            - "apps/api/**"
            - "libs/**"
        name: Check API Changed
        script:
        - source environment.sh
        - echo "export UPDATED_APPS='$UPDATED_APPS api'" >> environment.sh
        artifacts:
          - environment.sh

    - parallel: &build-test
      - step:
          conditions: *aggregator-condition
          name: Build and test aggregator
          caches:
            - node
          script:
            - yarn install
            - yarn test || true
            - yarn lint . || true
            - yarn build aggregator

      - step:
          conditions: *api-condition
          name: Build and test api
          caches:
            - node
          script:
            - yarn install
            - yarn test || true
            - yarn lint . || true
            - yarn build api

    - parallel: &docker-build-publish
      - step:
          conditions: *aggregator-condition
          name: Docker - Build and Publish aggregator
          <<: &docker-service
            services:
            - docker
            caches:
            - docker-cache
          script:
            - source environment.sh
            - export APP_NAME=aggregator
            - &docker-load-cache >-
              if [[ -f "docker-cache/cache.tar" ]]; then
                docker load < docker-cache/cache.tar;
              fi
            - &docker-build >-
              docker build
              --build-arg APP_NAME=$APP_NAME
              -t dao-stats-${APP_NAME}:latest
              -t dao-stats-${APP_NAME}:develop-latest
              -t dao-stats-${APP_NAME}:$DOCKER_ENV_TAG
              .
            - >-
              docker save $(docker images -qa) > docker-cache/cache.tar;
            - &docker-push
              pipe: atlassian/aws-ecr-push-image:1.4.2
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                IMAGE_NAME: dao-stats-${APP_NAME}
                TAGS: >-
                  latest
                  develop-latest
                  $DOCKER_ENV_TAG

      - step:
          conditions: *api-condition
          name: Docker - Build and Publish api
          <<: *docker-service
          script:
            - source environment.sh
            - export APP_NAME=api
            - *docker-load-cache
            - *docker-build
            - *docker-push

    - step: &helm-build-deploy
        name: Helm - Build and Deploy
        image: alpine/helm:3.6.3
        script:
          - source environment.sh
          - |
            if [ ! -d manifests ]
            then
              mkdir manifests
            fi
          - |
              for APP_NAME in $UPDATED_APPS
              do
                export CHART_FOLDER=apps/${APP_NAME}/deployment/app-chart
                helm lint $CHART_FOLDER
                helm template dao-stats-$APP_NAME $CHART_FOLDER \
                  --set image.tag=$DOCKER_ENV_TAG \
                  --set ingress.host=$K8S_INGRESS_HOST \
                  --set aggregatorConfig=$AGGREGATOR_CONFIG \
                  > manifests/$APP_NAME.yml
              done
          - pipe: atlassian/aws-eks-kubectl-run:2.2.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              CLUSTER_NAME: $EKS_CLUSTER_NAME
              KUBECTL_COMMAND: 'apply'
              RESOURCE_PATH: 'manifests'
              KUBECTL_ARGS:
                - "--namespace=$DEPLOYMENT_NAMESPACE"
        artifacts:
          - manifests/**
          - environment.sh


pipelines:
  pull-requests:
    '**':
      - parallel: *build-test

  branches:
    develop:
      - step:
          <<: *set-environment

          script:
            - >-
              echo export DOCKER_ENV_TAG=develop-$BITBUCKET_COMMIT >> environment.sh

      - step: *set-aggregator
      - step: *set-api

      - parallel: *docker-build-publish

      - parallel:
        - step:
            <<: *helm-build-deploy
            deployment: Development Mainnet

        - step:
            <<: *helm-build-deploy
            deployment: Development Testnet

    staging:
      - step:
          <<: *set-environment

          script:
            - >-
              echo export DOCKER_ENV_TAG=staging-$BITBUCKET_COMMIT >> environment.sh

      - step: *set-aggregator
      - step: *set-api

      - parallel: *docker-build-publish
          
      - step:
          <<: *helm-build-deploy
          deployment: Staging

  custom:
    test:
      - step:
          <<: *set-environment
          script:
            - >-
              echo export DOCKER_ENV_TAG=test-$BITBUCKET_COMMIT >> environment.sh

      - step: *set-aggregator
      - step: *set-api

      - parallel: *docker-build-publish

      - step:
          <<: *helm-build-deploy
          deployment: Test

  tags:
    '*':
      - step:
          <<: *set-environment

          script:
            - >-
              echo export DOCKER_ENV_TAG=$BITBUCKET_TAG >> environment.sh

      - step: *set-aggregator
      - step: *set-api

      - parallel: *docker-build-publish
          
      - parallel:
        - step:
            <<: *helm-build-deploy
            deployment: Production Mainnet
        - step:
            <<: *helm-build-deploy
            deployment: Production Testnet
